import { HardhatUserConfig } from "hardhat/config";
import { HardhatConfig } from "hardhat/types/config";
import { HardhatUserConfigValidationError } from "hardhat/types/hooks";
import { compact } from "lodash-es";

/**
 * This function validates the parts of the HardhatUserConfig that are relevant
 * to the plugin.
 *
 * This function is called from the `validateUserConfig` hook handler.
 *
 * @param userConfig The HardhatUserConfig, as exported in the config file.
 * @returns An array of validation errors, or an empty array if valid.
 */
export async function validatePluginConfig(
  userConfig: HardhatUserConfig,
): Promise<HardhatUserConfigValidationError[]> {
  const errors = compact(
    Object.entries(userConfig.networks ?? {}).map(
      ([networkName, networkConfig]) => {
        if (!("reownAccounts" in networkConfig)) {
          return undefined;
        }
        if (typeof networkConfig.reownAccounts !== "boolean") {
          return [
            {
              path: ["networks", networkName, "reownAccounts"],
              message: "Expected a boolean.",
            },
          ];
        }
        const reownAccounts = networkConfig.reownAccounts ?? false;
        if (reownAccounts && networkConfig.accounts != null) {
          return [
            {
              path: ["networks", networkName, "accounts"],
              message:
                "Expected accounts to NOT be set when reownAccounts is true.",
            },
          ];
        }
        return undefined;
      },
    ),
  ).flat();
  if (errors.length > 0) {
    return errors;
  }

  return [];
}

/**
 * Resolves the plugin config, based on an already validated HardhatUserConfig,
 * and a partially resolved HardhatConfig.
 *
 * This function is called from the `resolveUserConfig` hook handler.
 *
 * @param userConfig The HardhatUserConfig.
 * @param partiallyResolvedConfig The partially resolved HardhatConfig, which is
 *  generated by calling `next` in the `validateUserConfig` hook handler.
 * @returns The resolved HardhatConfig.
 */
export async function resolvePluginConfig(
  userConfig: HardhatUserConfig,
  partiallyResolvedConfig: HardhatConfig,
): Promise<HardhatConfig> {
  return {
    ...partiallyResolvedConfig,
  };
}
